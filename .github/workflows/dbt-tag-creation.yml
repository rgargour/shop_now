name: Tag on PR merge

on:
  workflow_run:
    workflows: ["dbt CI"]        
    types: [completed]

permissions:
  contents: write
  pull-requests: read

jobs:
  create-tag:
    if: >
      ${{
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.event == 'push' &&
        github.event.workflow_run.head_branch == 'main'
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch }}

      # Find the merge commit SHA and its PR (to read labels for semver bump)
      - name: Resolve meta (SHA & PR)
        id: meta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          pr="$(gh api repos/${{ github.repository }}/commits/$SHA/pulls --jq '.[0].number' || true)"
          echo "pr=$pr" >> $GITHUB_OUTPUT
          labels=""
          if [ -n "$pr" ]; then
            labels="$(gh api repos/${{ github.repository }}/issues/$pr/labels --jq '.[].name' | tr '\n' ' ')"
          fi
          echo "labels=$labels" >> $GITHUB_OUTPUT

      - name: Decide bump (labels -> major/minor/patch)
        id: bump
        run: |
          labels='${{ steps.meta.outputs.labels }}'
          if echo "$labels" | grep -qi 'semver:major'; then echo "level=major" >> $GITHUB_OUTPUT;
          elif echo "$labels" | grep -qi 'semver:minor'; then echo "level=minor" >> $GITHUB_OUTPUT;
          else echo "level=patch" >> $GITHUB_OUTPUT; fi

      - name: Compute next tag
        id: version
        shell: bash
        run: |
          set -euo pipefail

          git fetch --tags --prune --force
          if [ -f .git/shallow ]; then
            git fetch --unshallow --tags || true
          fi

          latest="$(
            { git tag -l 'v[0-9]*.[0-9]*.[0-9]*'; git tag -l '[0-9]*.[0-9]*.[0-9]*'; } \
            | sed 's/^v//' \
            | sort -V \
            | tail -n1
          )"
          latest="${latest:-0.0.0}"

          IFS='.' read -r MA MI PA <<<"$latest"
          MA=${MA:-0}; MI=${MI:-0}; PA=${PA:-0}

          lvl="${{ steps.bump.outputs.level }}"
          lvl="$(printf '%s' "$lvl" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
          case "$lvl" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            ""|patch) PA=$((PA+1)) ;;
            *) echo "Unknown bump level: '$lvl'"; exit 1 ;;
          esac

          new="v${MA}.${MI}.${PA}"
          while git rev-parse -q --verify "refs/tags/${new}" >/dev/null; do
            PA=$((PA+1))
            new="v${MA}.${MI}.${PA}"
          done

          echo "new=${new}" >> "$GITHUB_OUTPUT"


      - name: Create and push tag
        env:
          NEW_TAG: ${{ steps.version.outputs.new }}
          SHA: ${{ steps.meta.outputs.sha }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_TAG" "$SHA" -m "Tag $NEW_TAG"
          git push origin "$NEW_TAG"
